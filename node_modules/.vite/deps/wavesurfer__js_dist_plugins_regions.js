import "./chunk-UXIASGQL.js";

// node_modules/wavesurfer.js/dist/plugins/regions.js
var t = class {
  constructor() {
    this.listeners = {};
  }
  on(t2, e2) {
    return this.listeners[t2] || (this.listeners[t2] = /* @__PURE__ */ new Set()), this.listeners[t2].add(e2), () => this.un(t2, e2);
  }
  once(t2, e2) {
    const i2 = this.on(t2, e2), n2 = this.on(t2, () => {
      i2(), n2();
    });
    return i2;
  }
  un(t2, e2) {
    this.listeners[t2] && (e2 ? this.listeners[t2].delete(e2) : delete this.listeners[t2]);
  }
  unAll() {
    this.listeners = {};
  }
  emit(t2, ...e2) {
    this.listeners[t2] && this.listeners[t2].forEach((t3) => t3(...e2));
  }
};
var e = class extends t {
  constructor(t2) {
    super(), this.subscriptions = [], this.options = t2;
  }
  onInit() {
  }
  init(t2) {
    this.wavesurfer = t2, this.onInit();
  }
  destroy() {
    this.emit("destroy"), this.subscriptions.forEach((t2) => t2());
  }
};
function i(t2, e2, i2, n2, s2 = 5) {
  let r = () => {
  };
  if (!t2)
    return r;
  const o = (o2) => {
    if (2 === o2.button)
      return;
    o2.preventDefault(), o2.stopPropagation();
    let a = o2.clientX, l = o2.clientY, h = false;
    const d = (n3) => {
      n3.preventDefault(), n3.stopPropagation();
      const r2 = n3.clientX, o3 = n3.clientY;
      if (h || Math.abs(r2 - a) >= s2 || Math.abs(o3 - l) >= s2) {
        const { left: n4, top: s3 } = t2.getBoundingClientRect();
        h || (h = true, null == i2 || i2(a - n4, l - s3)), e2(r2 - a, o3 - l, r2 - n4, o3 - s3), a = r2, l = o3;
      }
    }, u = (t3) => {
      h && (t3.preventDefault(), t3.stopPropagation());
    }, c = () => {
      h && (null == n2 || n2()), r();
    };
    document.addEventListener("pointermove", d), document.addEventListener("pointerup", c), document.addEventListener("pointerleave", c), document.addEventListener("click", u, true), r = () => {
      document.removeEventListener("pointermove", d), document.removeEventListener("pointerup", c), document.removeEventListener("pointerleave", c), setTimeout(() => {
        document.removeEventListener("click", u, true);
      }, 10);
    };
  };
  return t2.addEventListener("pointerdown", o), () => {
    r(), t2.removeEventListener("pointerdown", o);
  };
}
var n = class extends t {
  constructor(t2, e2) {
    var i2, n2, s2, r, o, a;
    super(), this.totalDuration = e2, this.minLength = 0, this.maxLength = 1 / 0, this.id = t2.id || `region-${Math.random().toString(32).slice(2)}`, this.start = t2.start, this.end = null !== (i2 = t2.end) && void 0 !== i2 ? i2 : t2.start, this.drag = null === (n2 = t2.drag) || void 0 === n2 || n2, this.resize = null === (s2 = t2.resize) || void 0 === s2 || s2, this.color = null !== (r = t2.color) && void 0 !== r ? r : "rgba(0, 0, 0, 0.1)", this.minLength = null !== (o = t2.minLength) && void 0 !== o ? o : this.minLength, this.maxLength = null !== (a = t2.maxLength) && void 0 !== a ? a : this.maxLength, this.element = this.initElement(), this.setContent(t2.content), this.setPart(), this.renderPosition(), this.initMouseEvents();
  }
  setPart() {
    const t2 = this.start === this.end;
    this.element.setAttribute("part", `${t2 ? "marker" : "region"} ${this.id}`);
  }
  initElement() {
    const t2 = document.createElement("div"), e2 = this.start === this.end;
    if (t2.setAttribute("style", `
      position: absolute;
      height: 100%;
      background-color: ${e2 ? "none" : this.color};
      border-left: ${e2 ? "2px solid " + this.color : "none"};
      border-radius: 2px;
      box-sizing: border-box;
      transition: background-color 0.2s ease;
      cursor: ${this.drag ? "grab" : "default"};
      pointer-events: all;
    `), !e2 && this.resize) {
      const e3 = document.createElement("div");
      e3.setAttribute("data-resize", "left"), e3.setAttribute("style", `
        position: absolute;
        z-index: 2;
        width: 6px;
        height: 100%;
        top: 0;
        left: 0;
        border-left: 2px solid rgba(0, 0, 0, 0.5);
        border-radius: 2px 0 0 2px;
        cursor: ${this.resize ? "ew-resize" : "default"};
        word-break: keep-all;
      `), e3.setAttribute("part", "region-handle region-handle-left");
      const i2 = e3.cloneNode();
      i2.setAttribute("data-resize", "right"), i2.style.left = "", i2.style.right = "0", i2.style.borderRight = i2.style.borderLeft, i2.style.borderLeft = "", i2.style.borderRadius = "0 2px 2px 0", i2.setAttribute("part", "region-handle region-handle-right"), t2.appendChild(e3), t2.appendChild(i2);
    }
    return t2;
  }
  renderPosition() {
    const t2 = this.start / this.totalDuration, e2 = (this.totalDuration - this.end) / this.totalDuration;
    this.element.style.left = 100 * t2 + "%", this.element.style.right = 100 * e2 + "%";
  }
  initMouseEvents() {
    const { element: t2 } = this;
    if (!t2)
      return;
    t2.addEventListener("click", (t3) => this.emit("click", t3)), t2.addEventListener("mouseenter", (t3) => this.emit("over", t3)), t2.addEventListener("mouseleave", (t3) => this.emit("leave", t3)), t2.addEventListener("dblclick", (t3) => this.emit("dblclick", t3)), i(t2, (t3) => this.onMove(t3), () => this.onStartMoving(), () => this.onEndMoving());
    i(t2.querySelector('[data-resize="left"]'), (t3) => this.onResize(t3, "start"), () => null, () => this.onEndResizing(), 1), i(t2.querySelector('[data-resize="right"]'), (t3) => this.onResize(t3, "end"), () => null, () => this.onEndResizing(), 1);
  }
  onStartMoving() {
    this.drag && (this.element.style.cursor = "grabbing");
  }
  onEndMoving() {
    this.drag && (this.element.style.cursor = "grab", this.emit("update-end"));
  }
  _onUpdate(t2, e2) {
    if (!this.element.parentElement)
      return;
    const i2 = t2 / this.element.parentElement.clientWidth * this.totalDuration, n2 = e2 && "start" !== e2 ? this.start : this.start + i2, s2 = e2 && "end" !== e2 ? this.end : this.end + i2, r = s2 - n2;
    n2 >= 0 && s2 <= this.totalDuration && n2 <= s2 && r >= this.minLength && r <= this.maxLength && (this.start = n2, this.end = s2, this.renderPosition(), this.emit("update"));
  }
  onMove(t2) {
    this.drag && this._onUpdate(t2);
  }
  onResize(t2, e2) {
    this.resize && this._onUpdate(t2, e2);
  }
  onEndResizing() {
    this.resize && this.emit("update-end");
  }
  _setTotalDuration(t2) {
    this.totalDuration = t2, this.renderPosition();
  }
  play() {
    this.emit("play");
  }
  setContent(t2) {
    var e2;
    if (null === (e2 = this.content) || void 0 === e2 || e2.remove(), t2) {
      if ("string" == typeof t2) {
        this.content = document.createElement("div");
        const e3 = this.start === this.end;
        this.content.style.padding = `0.2em ${e3 ? 0.2 : 0.4}em`, this.content.textContent = t2;
      } else
        this.content = t2;
      this.content.setAttribute("part", "region-content"), this.element.appendChild(this.content);
    } else
      this.content = void 0;
  }
  setOptions(t2) {
    var e2, i2;
    if (t2.color && (this.color = t2.color, this.element.style.backgroundColor = this.color), void 0 !== t2.drag && (this.drag = t2.drag, this.element.style.cursor = this.drag ? "grab" : "default"), void 0 !== t2.resize && (this.resize = t2.resize, this.element.querySelectorAll("[data-resize]").forEach((t3) => {
      t3.style.cursor = this.resize ? "ew-resize" : "default";
    })), void 0 !== t2.start || void 0 !== t2.end) {
      const n2 = this.start === this.end;
      this.start = null !== (e2 = t2.start) && void 0 !== e2 ? e2 : this.start, this.end = null !== (i2 = t2.end) && void 0 !== i2 ? i2 : n2 ? this.start : this.end, this.renderPosition(), this.setPart();
    }
    t2.content && this.setContent(t2.content), t2.id && (this.id = t2.id, this.setPart());
  }
  remove() {
    this.emit("remove"), this.element.remove(), this.element = null;
  }
};
var s = class _s extends e {
  constructor(t2) {
    super(t2), this.regions = [], this.regionsContainer = this.initRegionsContainer();
  }
  static create(t2) {
    return new _s(t2);
  }
  onInit() {
    if (!this.wavesurfer)
      throw Error("WaveSurfer is not initialized");
    this.wavesurfer.getWrapper().appendChild(this.regionsContainer);
    let t2 = [];
    this.subscriptions.push(this.wavesurfer.on("timeupdate", (e2) => {
      const i2 = this.regions.filter((t3) => t3.start <= e2 && t3.end >= e2);
      i2.forEach((e3) => {
        t2.includes(e3) || this.emit("region-in", e3);
      }), t2.forEach((t3) => {
        i2.includes(t3) || this.emit("region-out", t3);
      }), t2 = i2;
    }));
  }
  initRegionsContainer() {
    const t2 = document.createElement("div");
    return t2.setAttribute("style", "\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 3;\n      pointer-events: none;\n    "), t2;
  }
  getRegions() {
    return this.regions;
  }
  avoidOverlapping(t2) {
    if (!t2.content)
      return;
    const e2 = t2.content, i2 = e2.getBoundingClientRect().left, n2 = t2.element.scrollWidth, s2 = this.regions.filter((e3) => {
      if (e3 === t2 || !e3.content)
        return false;
      const s3 = e3.content.getBoundingClientRect().left, r = e3.element.scrollWidth;
      return i2 < s3 + r && s3 < i2 + n2;
    }).map((t3) => {
      var e3;
      return (null === (e3 = t3.content) || void 0 === e3 ? void 0 : e3.getBoundingClientRect().height) || 0;
    }).reduce((t3, e3) => t3 + e3, 0);
    e2.style.marginTop = `${s2}px`;
  }
  saveRegion(t2) {
    this.regionsContainer.appendChild(t2.element), this.avoidOverlapping(t2), this.regions.push(t2);
    const e2 = [t2.on("update-end", () => {
      this.avoidOverlapping(t2), this.emit("region-updated", t2);
    }), t2.on("play", () => {
      var e3, i2;
      null === (e3 = this.wavesurfer) || void 0 === e3 || e3.play(), null === (i2 = this.wavesurfer) || void 0 === i2 || i2.setTime(t2.start);
    }), t2.on("click", (e3) => {
      this.emit("region-clicked", t2, e3);
    }), t2.on("dblclick", (e3) => {
      this.emit("region-double-clicked", t2, e3);
    }), t2.once("remove", () => {
      e2.forEach((t3) => t3()), this.regions = this.regions.filter((e3) => e3 !== t2);
    })];
    this.subscriptions.push(...e2), this.emit("region-created", t2);
  }
  addRegion(t2) {
    if (!this.wavesurfer)
      throw Error("WaveSurfer is not initialized");
    const e2 = this.wavesurfer.getDuration(), i2 = new n(t2, e2);
    return e2 ? this.saveRegion(i2) : this.subscriptions.push(this.wavesurfer.once("ready", (t3) => {
      i2._setTotalDuration(t3), this.saveRegion(i2);
    })), i2;
  }
  enableDragSelection(t2) {
    var e2, s2;
    const r = null === (s2 = null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.getWrapper()) || void 0 === s2 ? void 0 : s2.querySelector("div");
    if (!r)
      return () => {
      };
    let o = null, a = 0;
    return i(r, (t3, e3, i2) => {
      o && o._onUpdate(t3, i2 > a ? "end" : "start");
    }, (e3) => {
      if (a = e3, !this.wavesurfer)
        return;
      const i2 = this.wavesurfer.getDuration(), s3 = this.wavesurfer.getWrapper().clientWidth, r2 = e3 / s3 * i2, l = (e3 + 5) / s3 * i2;
      o = new n(Object.assign(Object.assign({}, t2), { start: r2, end: l }), i2), this.regionsContainer.appendChild(o.element);
    }, () => {
      o && (this.saveRegion(o), o = null);
    });
  }
  clearRegions() {
    this.regions.forEach((t2) => t2.remove());
  }
  destroy() {
    this.clearRegions(), super.destroy();
  }
};
export {
  s as default
};
//# sourceMappingURL=wavesurfer__js_dist_plugins_regions.js.map
